/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Jaeger Extension - Ballerina Module'

configurations {
    nativeJar {
        transitive false
    }
    externalJars {
        transitive false
    }
    distribution {
        canBeConsumed true
        canBeResolved false
    }
}

dependencies {
    nativeJar project(':jaeger-extension-native')

    externalJars "io.jaegertracing:jaeger-core:${jaegerVersion}"
    externalJars "io.jaegertracing:jaeger-thrift:${jaegerVersion}"
    externalJars "io.opentracing:opentracing-util:${openTracingVersion}"
    externalJars "io.opentracing:opentracing-noop:${openTracingVersion}"
    externalJars "org.apache.thrift:libthrift:${libThriftVersion}"
    externalJars "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    externalJars "com.squareup.okio:okio:${okIoVersion}"
}

clean {
    delete "${project.projectDir}/target"
    delete "${project.projectDir}/Ballerina.lock"
    delete "${project.projectDir}/ballerina-internal.log"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy, dependsOn: configurations.jbalTools) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs(dependsOn: configurations.ballerinaStdLibs) {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyExternalJarsToLib(type: Copy) {
    into "${project.projectDir}/lib"
    from configurations.externalJars
}

task copyStdlibs(type: Copy) {
    dependsOn unpackJballerinaTools
    dependsOn unpackStdLibs

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into "${project.buildDir}/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def packageOrg = "ballerinax"
def packageName = "jaeger"
def ballerinaConfigFile = new File("${project.projectDir}/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("${project.projectDir}/build/docs_parent/")
def artifactCacheParent = file("${project.buildDir}/cache_parent/")
def artifactLibParent = file("${project.buildDir}/lib_parent/")
def snapshotVersion = "-SNAPSHOT"
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def originalConfig = ballerinaConfigFile.text
def originalDependencyConfig = ballerinaDependencyFile.text
def artifactJars = file("$project.projectDir/target/cache/${packageOrg}/${packageName}/${tomlVersion}/java11/")

task updateTomlVerions {
    doLast {
        def stdlibDependentIoVersion = project.stdlibIoVersion.replace("${snapshotVersion}", "")
        def jaegerVersion = project.jaegerVersion
        def openTracingVersion = project.openTracingVersion
        def libThriftVersion = project.libThriftVersion
        def okHttpVersion = project.okHttpVersion
        def okIoVersion = project.okIoVersion

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@jaeger.version@", jaegerVersion)
        newConfig = newConfig.replace("@opentracing.version@", openTracingVersion)
        newConfig = newConfig.replace("@libthrift.version@", libThriftVersion)
        newConfig = newConfig.replace("@okhttp.version@", okHttpVersion)
        newConfig = newConfig.replace("@okio.version@", okIoVersion)
        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencyConfig
    }
}

task ballerinaBuild {
    dependsOn copyExternalJarsToLib
    dependsOn copyStdlibs
    dependsOn updateTomlVerions
    dependsOn configurations.nativeJar
    dependsOn configurations.externalJars

    inputs.dir file(project.projectDir)
    finalizedBy(revertTomlFile)

    doLast {
        def distributionBinPath = "${project.buildDir.absolutePath}/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

        def additionalBuildParams = ""
        if (project.hasProperty("debug")) {
            additionalBuildParams = "--debug ${project.findProperty("debug")}"
        }

        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "${distributionBinPath}/bal.bat build --offline --skip-tests ${additionalBuildParams} -c && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${distributionBinPath}/bal build --offline --skip-tests ${additionalBuildParams} -c"
            }
        }
        copy {
            from file("${project.projectDir}/target/bala")
            into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}")
        }
        copy {
            from file("${project.projectDir}/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null && project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }

        }
        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.buildDir/docs_parent/docs/${packageName}")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${project.buildDir}/distributions")
    from ballerinaBuild
}

artifacts {
    distribution createArtifactZip
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("packagePublishRepo")}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

build {
    dependsOn ballerinaBuild
}

task extractBallerinaClassFiles(type: Copy) {
    fileTree(artifactJars).forEach { file ->
        from zipTree(file).matching {
            exclude '**/tests/*'
            include '**/*.class'
        }
        into "${project.rootDir.absolutePath}/build/classes"
    }
}
